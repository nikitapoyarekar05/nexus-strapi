import {
  useConfig
} from "./chunk-RHT7TO2M.js";
import {
  getTrad,
  pageSizes,
  pluginId,
  sortOptions
} from "./chunk-VJOXBQUD.js";
import "./chunk-6BUQVL2F.js";
import "./chunk-EMX3VCJV.js";
import "./chunk-QIOTVS57.js";
import "./chunk-HJZZYZMH.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-OCW5I6M7.js";
import "./chunk-AY4F3F6S.js";
import "./chunk-V4237AG5.js";
import "./chunk-3TLZEE6L.js";
import "./chunk-27EK7IAP.js";
import "./chunk-ZWCQ754P.js";
import "./chunk-VWFDD22O.js";
import "./chunk-T5HEDVRE.js";
import {
  ConfirmDialog
} from "./chunk-25A6K6L2.js";
import "./chunk-6PCQLAEM.js";
import "./chunk-RSOXOC2L.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-QD5AHFJM.js";
import "./chunk-K65KIEAL.js";
import "./chunk-ASKFTMKM.js";
import "./chunk-XNM32OGQ.js";
import {
  require_set
} from "./chunk-RTRTW2PQ.js";
import "./chunk-TKRCAUSC.js";
import "./chunk-T5JKSGTJ.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-TQCAKOEA.js";
import "./chunk-EGNP2T5O.js";
import {
  useTracking
} from "./chunk-RRHYGWRE.js";
import "./chunk-KYZQBXLR.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-QIJGNK42.js";
import "./chunk-TQNYHAC4.js";
import "./chunk-HSJQEQOO.js";
import "./chunk-T4A5TVGC.js";
import "./chunk-DRQSVOXR.js";
import "./chunk-I3EXVO47.js";
import "./chunk-AOBISR7O.js";
import "./chunk-3NP6RCXZ.js";
import "./chunk-24UQILRH.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-CIY2EQVF.js";
import {
  Layouts
} from "./chunk-5C4NAQI5.js";
import "./chunk-PQINNV4N.js";
import {
  require_isEqual
} from "./chunk-VYSYYPOB.js";
import {
  Page
} from "./chunk-K2XTMQJE.js";
import "./chunk-YOTXRG5G.js";
import "./chunk-MMO4FMS6.js";
import {
  require_get,
  require_lib
} from "./chunk-BO7UGWQ3.js";
import "./chunk-XACHTFJH.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import {
  fn
} from "./chunk-5VODLFKF.js";
import {
  useNotification
} from "./chunk-N3SS72K2.js";
import {
  Box,
  Button,
  Dialog,
  Field,
  Grid,
  Link,
  SingleSelect,
  SingleSelectOption,
  useIntl
} from "./chunk-4SBSQS5Q.js";
import "./chunk-5ZC4PE57.js";
import {
  NavLink
} from "./chunk-TUXTO2Z5.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$4F,
  ForwardRef$5j
} from "./chunk-WRD5KPDH.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-ACIMPXWY.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/ConfigureTheView.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_isEqual = __toESM(require_isEqual(), 1);
var import_qs2 = __toESM(require_lib(), 1);

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/components/Settings.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_qs = __toESM(require_lib(), 1);
var Settings = ({ sort = "", pageSize = 10, onChange: onChange2 }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Box, {
    background: "neutral0",
    hasRadius: true,
    shadow: "tableShadow",
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 7,
    paddingRight: 7,
    children: (0, import_jsx_runtime.jsxs)(Grid.Root, {
      gap: 4,
      children: [
        (0, import_jsx_runtime.jsx)(Grid.Item, {
          s: 12,
          col: 6,
          direction: "column",
          alignItems: "stretch",
          children: (0, import_jsx_runtime.jsxs)(Field.Root, {
            hint: formatMessage({
              id: getTrad("config.entries.note"),
              defaultMessage: "Number of assets displayed by default in the Media Library"
            }),
            name: "pageSize",
            children: [
              (0, import_jsx_runtime.jsx)(Field.Label, {
                children: formatMessage({
                  id: getTrad("config.entries.title"),
                  defaultMessage: "Entries per page"
                })
              }),
              (0, import_jsx_runtime.jsx)(SingleSelect, {
                onChange: (value) => onChange2({
                  target: {
                    name: "pageSize",
                    value
                  }
                }),
                value: pageSize,
                children: pageSizes.map((pageSize2) => (0, import_jsx_runtime.jsx)(SingleSelectOption, {
                  value: pageSize2,
                  children: pageSize2
                }, pageSize2))
              }),
              (0, import_jsx_runtime.jsx)(Field.Hint, {})
            ]
          })
        }),
        (0, import_jsx_runtime.jsx)(Grid.Item, {
          s: 12,
          col: 6,
          direction: "column",
          alignItems: "stretch",
          children: (0, import_jsx_runtime.jsxs)(Field.Root, {
            hint: formatMessage({
              id: getTrad("config.note"),
              defaultMessage: "Note: You can override this value in the media library."
            }),
            name: "sort",
            children: [
              (0, import_jsx_runtime.jsx)(Field.Label, {
                children: formatMessage({
                  id: getTrad("config.sort.title"),
                  defaultMessage: "Default sort order"
                })
              }),
              (0, import_jsx_runtime.jsx)(SingleSelect, {
                onChange: (value) => onChange2({
                  target: {
                    name: "sort",
                    value
                  }
                }),
                value: sort,
                "test-sort": sort,
                "data-testid": "sort-select",
                children: sortOptions.map((filter) => (0, import_jsx_runtime.jsx)(SingleSelectOption, {
                  "data-testid": `sort-option-${filter.value}`,
                  value: filter.value,
                  children: formatMessage({
                    id: getTrad(filter.key),
                    defaultMessage: `${filter.value}`
                  })
                }, filter.key))
              }),
              (0, import_jsx_runtime.jsx)(Field.Hint, {})
            ]
          })
        })
      ]
    })
  });
};

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/state/actionTypes.mjs
var ON_CHANGE = `${pluginId}/ON_CHANGE`;
var SET_LOADED = `${pluginId}/SET_LOADED`;

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/state/actions.mjs
var onChange = ({ name, value }) => ({
  type: ON_CHANGE,
  keys: name,
  value
});
var setLoaded = () => ({
  type: SET_LOADED
});

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/state/init.mjs
var initialState = {
  initialData: {},
  modifiedData: {}
};
var init = (configData) => {
  return {
    ...initialState,
    initialData: configData,
    modifiedData: configData
  };
};

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/state/reducer.mjs
var import_get = __toESM(require_get(), 1);
var import_set = __toESM(require_set(), 1);
var reducer = (state = initialState, action = {
  type: ""
}) => (
  // eslint-disable-next-line consistent-return
  fn(state, (draftState) => {
    switch (action.type) {
      case ON_CHANGE: {
        if ("keys" in action && "value" in action && action.keys) {
          (0, import_set.default)(draftState, [
            "modifiedData",
            ...action.keys.split(".")
          ], action.value);
        }
        break;
      }
      case SET_LOADED: {
        const reInitialise = init((0, import_get.default)(draftState, [
          "modifiedData"
        ], {}));
        draftState.initialData = reInitialise.initialData;
        draftState.modifiedData = reInitialise.modifiedData;
        break;
      }
      default:
        return draftState;
    }
  })
);

// node_modules/@strapi/upload/dist/admin/pages/App/ConfigureTheView/ConfigureTheView.mjs
var ConfigureTheView = ({ config }) => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { mutateConfig } = useConfig();
  const { isLoading: isSubmittingForm } = mutateConfig;
  const [showWarningSubmit, setWarningSubmit] = React.useState(false);
  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);
  const [reducerState, dispatch] = React.useReducer(reducer, initialState, () => init(config));
  const typedDispatch = dispatch;
  const { initialData, modifiedData } = reducerState;
  const handleSubmit = (e) => {
    e.preventDefault();
    toggleWarningSubmit();
  };
  const handleConfirm = async () => {
    trackUsage("willEditMediaLibraryConfig");
    await mutateConfig.mutateAsync(modifiedData);
    setWarningSubmit(false);
    typedDispatch(setLoaded());
    toggleNotification({
      type: "success",
      message: formatMessage({
        id: "notification.form.success.fields",
        defaultMessage: "Changes saved"
      })
    });
  };
  const handleChange = ({ target: { name, value } }) => {
    typedDispatch(onChange({
      name,
      value
    }));
  };
  return (0, import_jsx_runtime2.jsx)(Layouts.Root, {
    children: (0, import_jsx_runtime2.jsx)(Page.Main, {
      "aria-busy": isSubmittingForm,
      children: (0, import_jsx_runtime2.jsxs)("form", {
        onSubmit: handleSubmit,
        children: [
          (0, import_jsx_runtime2.jsx)(Layouts.Header, {
            navigationAction: (0, import_jsx_runtime2.jsx)(Link, {
              tag: NavLink,
              startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$5j, {}),
              to: `/plugins/${pluginId}`,
              id: "go-back",
              children: formatMessage({
                id: getTrad("config.back"),
                defaultMessage: "Back"
              })
            }),
            primaryAction: (0, import_jsx_runtime2.jsx)(Button, {
              size: "S",
              startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$4F, {}),
              disabled: (0, import_isEqual.default)(modifiedData, initialData),
              type: "submit",
              children: formatMessage({
                id: "global.save",
                defaultMessage: "Save"
              })
            }),
            subtitle: formatMessage({
              id: getTrad("config.subtitle"),
              defaultMessage: "Define the view settings of the media library."
            }),
            title: formatMessage({
              id: getTrad("config.title"),
              defaultMessage: "Configure the view - Media Library"
            })
          }),
          (0, import_jsx_runtime2.jsx)(Layouts.Content, {
            children: (0, import_jsx_runtime2.jsx)(Settings, {
              "data-testid": "settings",
              pageSize: modifiedData.pageSize || "",
              sort: modifiedData.sort || "",
              onChange: handleChange
            })
          }),
          "x",
          (0, import_jsx_runtime2.jsx)(Dialog.Root, {
            open: showWarningSubmit,
            onOpenChange: toggleWarningSubmit,
            children: (0, import_jsx_runtime2.jsx)(ConfirmDialog, {
              onConfirm: handleConfirm,
              variant: "default",
              children: formatMessage({
                id: getTrad("config.popUpWarning.warning.updateAllSettings"),
                defaultMessage: "This will modify all your settings"
              })
            })
          })
        ]
      })
    })
  });
};
export {
  ConfigureTheView
};
//# sourceMappingURL=ConfigureTheView-XM634CSQ.js.map
